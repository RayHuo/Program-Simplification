Calculating the Greatest Reliable Set :
Vocabulary atom list size = 628

The lfp(W_P(L)) cost time : 8.980

Final Consequence : ~neg_goal(2), ~reach(1, 4, 0), dir(e), dir(w), dir(n), dir(s), inverse(e, w), inverse(w, e), inverse(n, s), inverse(s, n), field(1, 1), field(1, 2), field(1, 3), field(1, 4), field(2, 1), field(2, 2), field(2, 3), field(2, 4), field(3, 1), field(3, 2), field(3, 3), field(3, 4), field(4, 1), field(4, 2), field(4, 3), field(4, 4), init_on(3, 2), goal_on(1, 4), connect(1, 1, s), connect(1, 1, w), connect(1, 2, n), connect(1, 2, e), connect(1, 2, w), connect(1, 3, e), connect(1, 4, n), connect(1, 4, w), connect(2, 1, n), connect(2, 1, w), connect(2, 2, n), connect(2, 2, w), connect(2, 3, n), connect(2, 3, s), connect(2, 4, n), connect(2, 4, e), connect(2, 4, w), connect(3, 1, n), connect(3, 1, s), connect(3, 2, n), connect(3, 2, w), connect(3, 3, e), connect(3, 4, n), connect(3, 4, s), connect(3, 4, w), connect(4, 1, n), connect(4, 1, w), connect(4, 2, n), connect(4, 2, s), connect(4, 2, e), connect(4, 2, w), connect(4, 3, n), connect(4, 3, e), connect(4, 4, w), max_steps(2), row(4), row(3), row(2), row(1), col(4), col(3), col(2), col(1), num_rows(4), num_cols(4), goal(1, 4, 0), reach(3, 2, 0), conn(4, 4, w, 0), conn(4, 3, e, 0), conn(4, 3, n, 0), conn(4, 2, w, 0), conn(4, 2, e, 0), conn(4, 2, s, 0), conn(4, 2, n, 0), conn(4, 1, w, 0), conn(4, 1, n, 0), conn(3, 4, w, 0), conn(3, 4, s, 0), conn(3, 4, n, 0), conn(3, 3, e, 0), conn(3, 2, w, 0), conn(3, 2, n, 0), conn(3, 1, s, 0), conn(3, 1, n, 0), conn(2, 4, w, 0), conn(2, 4, e, 0), conn(2, 4, n, 0), conn(2, 3, s, 0), conn(2, 3, n, 0), conn(2, 2, w, 0), conn(2, 2, n, 0), conn(2, 1, w, 0), conn(2, 1, n, 0), conn(1, 4, w, 0), conn(1, 4, n, 0), conn(1, 3, e, 0), conn(1, 2, w, 0), conn(1, 2, e, 0), conn(1, 2, n, 0), conn(1, 1, w, 0), conn(1, 1, s, 0), step(2), step(1), dneighbor(n, 3, 4, 4, 4), dneighbor(n, 3, 3, 4, 3), dneighbor(n, 3, 2, 4, 2), dneighbor(n, 3, 1, 4, 1), dneighbor(n, 2, 4, 3, 4), dneighbor(n, 2, 3, 3, 3), dneighbor(n, 2, 2, 3, 2), dneighbor(n, 2, 1, 3, 1), dneighbor(n, 1, 4, 2, 4), dneighbor(n, 1, 3, 2, 3), dneighbor(n, 1, 2, 2, 2), dneighbor(n, 1, 1, 2, 1), dneighbor(s, 4, 4, 3, 4), dneighbor(s, 4, 3, 3, 3), dneighbor(s, 4, 2, 3, 2), dneighbor(s, 4, 1, 3, 1), dneighbor(s, 3, 4, 2, 4), dneighbor(s, 3, 3, 2, 3), dneighbor(s, 3, 2, 2, 2), dneighbor(s, 3, 1, 2, 1), dneighbor(s, 2, 4, 1, 4), dneighbor(s, 2, 3, 1, 3), dneighbor(s, 2, 2, 1, 2), dneighbor(s, 2, 1, 1, 1), dneighbor(e, 4, 3, 4, 4), dneighbor(e, 4, 2, 4, 3), dneighbor(e, 4, 1, 4, 2), dneighbor(e, 3, 3, 3, 4), dneighbor(e, 3, 2, 3, 3), dneighbor(e, 3, 1, 3, 2), dneighbor(e, 2, 3, 2, 4), dneighbor(e, 2, 2, 2, 3), dneighbor(e, 2, 1, 2, 2), dneighbor(e, 1, 3, 1, 4), dneighbor(e, 1, 2, 1, 3), dneighbor(e, 1, 1, 1, 2), dneighbor(w, 4, 4, 4, 3), dneighbor(w, 4, 3, 4, 2), dneighbor(w, 4, 2, 4, 1), dneighbor(w, 3, 4, 3, 3), dneighbor(w, 3, 3, 3, 2), dneighbor(w, 3, 2, 3, 1), dneighbor(w, 2, 4, 2, 3), dneighbor(w, 2, 3, 2, 2), dneighbor(w, 2, 2, 2, 1), dneighbor(w, 1, 4, 1, 3), dneighbor(w, 1, 3, 1, 2), dneighbor(w, 1, 2, 1, 1), neighbor(w, 1, 2, 1, 1), neighbor(w, 1, 3, 1, 2), neighbor(w, 1, 4, 1, 3), neighbor(w, 2, 2, 2, 1), neighbor(w, 2, 3, 2, 2), neighbor(w, 2, 4, 2, 3), neighbor(w, 3, 2, 3, 1), neighbor(w, 3, 3, 3, 2), neighbor(w, 3, 4, 3, 3), neighbor(w, 4, 2, 4, 1), neighbor(w, 4, 3, 4, 2), neighbor(w, 4, 4, 4, 3), neighbor(e, 1, 1, 1, 2), neighbor(e, 1, 2, 1, 3), neighbor(e, 1, 3, 1, 4), neighbor(e, 2, 1, 2, 2), neighbor(e, 2, 2, 2, 3), neighbor(e, 2, 3, 2, 4), neighbor(e, 3, 1, 3, 2), neighbor(e, 3, 2, 3, 3), neighbor(e, 3, 3, 3, 4), neighbor(e, 4, 1, 4, 2), neighbor(e, 4, 2, 4, 3), neighbor(e, 4, 3, 4, 4), neighbor(s, 2, 1, 1, 1), neighbor(s, 2, 2, 1, 2), neighbor(s, 2, 3, 1, 3), neighbor(s, 2, 4, 1, 4), neighbor(s, 3, 1, 2, 1), neighbor(s, 3, 2, 2, 2), neighbor(s, 3, 3, 2, 3), neighbor(s, 3, 4, 2, 4), neighbor(s, 4, 1, 3, 1), neighbor(s, 4, 2, 3, 2), neighbor(s, 4, 3, 3, 3), neighbor(s, 4, 4, 3, 4), neighbor(n, 1, 1, 2, 1), neighbor(n, 1, 2, 2, 2), neighbor(n, 1, 3, 2, 3), neighbor(n, 1, 4, 2, 4), neighbor(n, 2, 1, 3, 1), neighbor(n, 2, 2, 3, 2), neighbor(n, 2, 3, 3, 3), neighbor(n, 2, 4, 3, 4), neighbor(n, 3, 1, 4, 1), neighbor(n, 3, 2, 4, 2), neighbor(n, 3, 3, 4, 3), neighbor(n, 3, 4, 4, 4), neighbor(n, 4, 4, 1, 4), neighbor(n, 4, 3, 1, 3), neighbor(n, 4, 2, 1, 2), neighbor(n, 4, 1, 1, 1), neighbor(s, 1, 4, 4, 4), neighbor(s, 1, 3, 4, 3), neighbor(s, 1, 2, 4, 2), neighbor(s, 1, 1, 4, 1), neighbor(e, 4, 4, 4, 1), neighbor(e, 3, 4, 3, 1), neighbor(e, 2, 4, 2, 1), neighbor(e, 1, 4, 1, 1), neighbor(w, 4, 1, 4, 4), neighbor(w, 3, 1, 3, 4), neighbor(w, 2, 1, 2, 4), neighbor(w, 1, 1, 1, 4), neg_goal(0)
Final Consequence size = 224

The GWRS of NLP is : dir(e) dir(w) dir(n) dir(s) inverse(e, w) inverse(w, e) inverse(n, s) inverse(s, n) field(1, 1) field(1, 2) field(1, 3) field(1, 4) field(2, 1) field(2, 2) field(2, 3) field(2, 4) field(3, 1) field(3, 2) field(3, 3) field(3, 4) field(4, 1) field(4, 2) field(4, 3) field(4, 4) init_on(3, 2) goal_on(1, 4) connect(1, 1, s) connect(1, 1, w) connect(1, 2, n) connect(1, 2, e) connect(1, 2, w) connect(1, 3, e) connect(1, 4, n) connect(1, 4, w) connect(2, 1, n) connect(2, 1, w) connect(2, 2, n) connect(2, 2, w) connect(2, 3, n) connect(2, 3, s) connect(2, 4, n) connect(2, 4, e) connect(2, 4, w) connect(3, 1, n) connect(3, 1, s) connect(3, 2, n) connect(3, 2, w) connect(3, 3, e) connect(3, 4, n) connect(3, 4, s) connect(3, 4, w) connect(4, 1, n) connect(4, 1, w) connect(4, 2, n) connect(4, 2, s) connect(4, 2, e) connect(4, 2, w) connect(4, 3, n) connect(4, 3, e) connect(4, 4, w) max_steps(2) row(4) row(3) row(2) row(1) col(4) col(3) col(2) col(1) num_rows(4) num_cols(4) goal(1, 4, 0) reach(3, 2, 0) conn(4, 4, w, 0) conn(4, 3, e, 0) conn(4, 3, n, 0) conn(4, 2, w, 0) conn(4, 2, e, 0) conn(4, 2, s, 0) conn(4, 2, n, 0) conn(4, 1, w, 0) conn(4, 1, n, 0) conn(3, 4, w, 0) conn(3, 4, s, 0) conn(3, 4, n, 0) conn(3, 3, e, 0) conn(3, 2, w, 0) conn(3, 2, n, 0) conn(3, 1, s, 0) conn(3, 1, n, 0) conn(2, 4, w, 0) conn(2, 4, e, 0) conn(2, 4, n, 0) conn(2, 3, s, 0) conn(2, 3, n, 0) conn(2, 2, w, 0) conn(2, 2, n, 0) conn(2, 1, w, 0) conn(2, 1, n, 0) conn(1, 4, w, 0) conn(1, 4, n, 0) conn(1, 3, e, 0) conn(1, 2, w, 0) conn(1, 2, e, 0) conn(1, 2, n, 0) conn(1, 1, w, 0) conn(1, 1, s, 0) step(2) step(1) dneighbor(n, 3, 4, 4, 4) dneighbor(n, 3, 3, 4, 3) dneighbor(n, 3, 2, 4, 2) dneighbor(n, 3, 1, 4, 1) dneighbor(n, 2, 4, 3, 4) dneighbor(n, 2, 3, 3, 3) dneighbor(n, 2, 2, 3, 2) dneighbor(n, 2, 1, 3, 1) dneighbor(n, 1, 4, 2, 4) dneighbor(n, 1, 3, 2, 3) dneighbor(n, 1, 2, 2, 2) dneighbor(n, 1, 1, 2, 1) dneighbor(s, 4, 4, 3, 4) dneighbor(s, 4, 3, 3, 3) dneighbor(s, 4, 2, 3, 2) dneighbor(s, 4, 1, 3, 1) dneighbor(s, 3, 4, 2, 4) dneighbor(s, 3, 3, 2, 3) dneighbor(s, 3, 2, 2, 2) dneighbor(s, 3, 1, 2, 1) dneighbor(s, 2, 4, 1, 4) dneighbor(s, 2, 3, 1, 3) dneighbor(s, 2, 2, 1, 2) dneighbor(s, 2, 1, 1, 1) dneighbor(e, 4, 3, 4, 4) dneighbor(e, 4, 2, 4, 3) dneighbor(e, 4, 1, 4, 2) dneighbor(e, 3, 3, 3, 4) dneighbor(e, 3, 2, 3, 3) dneighbor(e, 3, 1, 3, 2) dneighbor(e, 2, 3, 2, 4) dneighbor(e, 2, 2, 2, 3) dneighbor(e, 2, 1, 2, 2) dneighbor(e, 1, 3, 1, 4) dneighbor(e, 1, 2, 1, 3) dneighbor(e, 1, 1, 1, 2) dneighbor(w, 4, 4, 4, 3) dneighbor(w, 4, 3, 4, 2) dneighbor(w, 4, 2, 4, 1) dneighbor(w, 3, 4, 3, 3) dneighbor(w, 3, 3, 3, 2) dneighbor(w, 3, 2, 3, 1) dneighbor(w, 2, 4, 2, 3) dneighbor(w, 2, 3, 2, 2) dneighbor(w, 2, 2, 2, 1) dneighbor(w, 1, 4, 1, 3) dneighbor(w, 1, 3, 1, 2) dneighbor(w, 1, 2, 1, 1) neighbor(w, 1, 2, 1, 1) neighbor(w, 1, 3, 1, 2) neighbor(w, 1, 4, 1, 3) neighbor(w, 2, 2, 2, 1) neighbor(w, 2, 3, 2, 2) neighbor(w, 2, 4, 2, 3) neighbor(w, 3, 2, 3, 1) neighbor(w, 3, 3, 3, 2) neighbor(w, 3, 4, 3, 3) neighbor(w, 4, 2, 4, 1) neighbor(w, 4, 3, 4, 2) neighbor(w, 4, 4, 4, 3) neighbor(e, 1, 1, 1, 2) neighbor(e, 1, 2, 1, 3) neighbor(e, 1, 3, 1, 4) neighbor(e, 2, 1, 2, 2) neighbor(e, 2, 2, 2, 3) neighbor(e, 2, 3, 2, 4) neighbor(e, 3, 1, 3, 2) neighbor(e, 3, 2, 3, 3) neighbor(e, 3, 3, 3, 4) neighbor(e, 4, 1, 4, 2) neighbor(e, 4, 2, 4, 3) neighbor(e, 4, 3, 4, 4) neighbor(s, 2, 1, 1, 1) neighbor(s, 2, 2, 1, 2) neighbor(s, 2, 3, 1, 3) neighbor(s, 2, 4, 1, 4) neighbor(s, 3, 1, 2, 1) neighbor(s, 3, 2, 2, 2) neighbor(s, 3, 3, 2, 3) neighbor(s, 3, 4, 2, 4) neighbor(s, 4, 1, 3, 1) neighbor(s, 4, 2, 3, 2) neighbor(s, 4, 3, 3, 3) neighbor(s, 4, 4, 3, 4) neighbor(n, 1, 1, 2, 1) neighbor(n, 1, 2, 2, 2) neighbor(n, 1, 3, 2, 3) neighbor(n, 1, 4, 2, 4) neighbor(n, 2, 1, 3, 1) neighbor(n, 2, 2, 3, 2) neighbor(n, 2, 3, 3, 3) neighbor(n, 2, 4, 3, 4) neighbor(n, 3, 1, 4, 1) neighbor(n, 3, 2, 4, 2) neighbor(n, 3, 3, 4, 3) neighbor(n, 3, 4, 4, 4) neighbor(n, 4, 4, 1, 4) neighbor(n, 4, 3, 1, 3) neighbor(n, 4, 2, 1, 2) neighbor(n, 4, 1, 1, 1) neighbor(s, 1, 4, 4, 4) neighbor(s, 1, 3, 4, 3) neighbor(s, 1, 2, 4, 2) neighbor(s, 1, 1, 4, 1) neighbor(e, 4, 4, 4, 1) neighbor(e, 3, 4, 3, 1) neighbor(e, 2, 4, 2, 1) neighbor(e, 1, 4, 1, 1) neighbor(w, 4, 1, 4, 4) neighbor(w, 3, 1, 3, 4) neighbor(w, 2, 1, 2, 4) neighbor(w, 1, 1, 1, 4) neg_goal(0) 
The GWRS size of NLP = 222
The GWRS cost time = 0.240

The GSRS of NLP is : dir(e) dir(w) dir(n) dir(s) inverse(e, w) inverse(w, e) inverse(n, s) inverse(s, n) field(1, 1) field(1, 2) field(1, 3) field(1, 4) field(2, 1) field(2, 2) field(2, 3) field(2, 4) field(3, 1) field(3, 2) field(3, 3) field(3, 4) field(4, 1) field(4, 2) field(4, 3) field(4, 4) init_on(3, 2) goal_on(1, 4) connect(1, 1, s) connect(1, 1, w) connect(1, 2, n) connect(1, 2, e) connect(1, 2, w) connect(1, 3, e) connect(1, 4, n) connect(1, 4, w) connect(2, 1, n) connect(2, 1, w) connect(2, 2, n) connect(2, 2, w) connect(2, 3, n) connect(2, 3, s) connect(2, 4, n) connect(2, 4, e) connect(2, 4, w) connect(3, 1, n) connect(3, 1, s) connect(3, 2, n) connect(3, 2, w) connect(3, 3, e) connect(3, 4, n) connect(3, 4, s) connect(3, 4, w) connect(4, 1, n) connect(4, 1, w) connect(4, 2, n) connect(4, 2, s) connect(4, 2, e) connect(4, 2, w) connect(4, 3, n) connect(4, 3, e) connect(4, 4, w) max_steps(2) row(4) row(3) row(2) row(1) col(4) col(3) col(2) col(1) num_rows(4) num_cols(4) goal(1, 4, 0) reach(3, 2, 0) conn(4, 4, w, 0) conn(4, 3, e, 0) conn(4, 3, n, 0) conn(4, 2, w, 0) conn(4, 2, e, 0) conn(4, 2, s, 0) conn(4, 2, n, 0) conn(4, 1, w, 0) conn(4, 1, n, 0) conn(3, 4, w, 0) conn(3, 4, s, 0) conn(3, 4, n, 0) conn(3, 3, e, 0) conn(3, 2, w, 0) conn(3, 2, n, 0) conn(3, 1, s, 0) conn(3, 1, n, 0) conn(2, 4, w, 0) conn(2, 4, e, 0) conn(2, 4, n, 0) conn(2, 3, s, 0) conn(2, 3, n, 0) conn(2, 2, w, 0) conn(2, 2, n, 0) conn(2, 1, w, 0) conn(2, 1, n, 0) conn(1, 4, w, 0) conn(1, 4, n, 0) conn(1, 3, e, 0) conn(1, 2, w, 0) conn(1, 2, e, 0) conn(1, 2, n, 0) conn(1, 1, w, 0) conn(1, 1, s, 0) step(2) step(1) dneighbor(n, 3, 4, 4, 4) dneighbor(n, 3, 3, 4, 3) dneighbor(n, 3, 2, 4, 2) dneighbor(n, 3, 1, 4, 1) dneighbor(n, 2, 4, 3, 4) dneighbor(n, 2, 3, 3, 3) dneighbor(n, 2, 2, 3, 2) dneighbor(n, 2, 1, 3, 1) dneighbor(n, 1, 4, 2, 4) dneighbor(n, 1, 3, 2, 3) dneighbor(n, 1, 2, 2, 2) dneighbor(n, 1, 1, 2, 1) dneighbor(s, 4, 4, 3, 4) dneighbor(s, 4, 3, 3, 3) dneighbor(s, 4, 2, 3, 2) dneighbor(s, 4, 1, 3, 1) dneighbor(s, 3, 4, 2, 4) dneighbor(s, 3, 3, 2, 3) dneighbor(s, 3, 2, 2, 2) dneighbor(s, 3, 1, 2, 1) dneighbor(s, 2, 4, 1, 4) dneighbor(s, 2, 3, 1, 3) dneighbor(s, 2, 2, 1, 2) dneighbor(s, 2, 1, 1, 1) dneighbor(e, 4, 3, 4, 4) dneighbor(e, 4, 2, 4, 3) dneighbor(e, 4, 1, 4, 2) dneighbor(e, 3, 3, 3, 4) dneighbor(e, 3, 2, 3, 3) dneighbor(e, 3, 1, 3, 2) dneighbor(e, 2, 3, 2, 4) dneighbor(e, 2, 2, 2, 3) dneighbor(e, 2, 1, 2, 2) dneighbor(e, 1, 3, 1, 4) dneighbor(e, 1, 2, 1, 3) dneighbor(e, 1, 1, 1, 2) dneighbor(w, 4, 4, 4, 3) dneighbor(w, 4, 3, 4, 2) dneighbor(w, 4, 2, 4, 1) dneighbor(w, 3, 4, 3, 3) dneighbor(w, 3, 3, 3, 2) dneighbor(w, 3, 2, 3, 1) dneighbor(w, 2, 4, 2, 3) dneighbor(w, 2, 3, 2, 2) dneighbor(w, 2, 2, 2, 1) dneighbor(w, 1, 4, 1, 3) dneighbor(w, 1, 3, 1, 2) dneighbor(w, 1, 2, 1, 1) neighbor(w, 1, 2, 1, 1) neighbor(w, 1, 3, 1, 2) neighbor(w, 1, 4, 1, 3) neighbor(w, 2, 2, 2, 1) neighbor(w, 2, 3, 2, 2) neighbor(w, 2, 4, 2, 3) neighbor(w, 3, 2, 3, 1) neighbor(w, 3, 3, 3, 2) neighbor(w, 3, 4, 3, 3) neighbor(w, 4, 2, 4, 1) neighbor(w, 4, 3, 4, 2) neighbor(w, 4, 4, 4, 3) neighbor(e, 1, 1, 1, 2) neighbor(e, 1, 2, 1, 3) neighbor(e, 1, 3, 1, 4) neighbor(e, 2, 1, 2, 2) neighbor(e, 2, 2, 2, 3) neighbor(e, 2, 3, 2, 4) neighbor(e, 3, 1, 3, 2) neighbor(e, 3, 2, 3, 3) neighbor(e, 3, 3, 3, 4) neighbor(e, 4, 1, 4, 2) neighbor(e, 4, 2, 4, 3) neighbor(e, 4, 3, 4, 4) neighbor(s, 2, 1, 1, 1) neighbor(s, 2, 2, 1, 2) neighbor(s, 2, 3, 1, 3) neighbor(s, 2, 4, 1, 4) neighbor(s, 3, 1, 2, 1) neighbor(s, 3, 2, 2, 2) neighbor(s, 3, 3, 2, 3) neighbor(s, 3, 4, 2, 4) neighbor(s, 4, 1, 3, 1) neighbor(s, 4, 2, 3, 2) neighbor(s, 4, 3, 3, 3) neighbor(s, 4, 4, 3, 4) neighbor(n, 1, 1, 2, 1) neighbor(n, 1, 2, 2, 2) neighbor(n, 1, 3, 2, 3) neighbor(n, 1, 4, 2, 4) neighbor(n, 2, 1, 3, 1) neighbor(n, 2, 2, 3, 2) neighbor(n, 2, 3, 3, 3) neighbor(n, 2, 4, 3, 4) neighbor(n, 3, 1, 4, 1) neighbor(n, 3, 2, 4, 2) neighbor(n, 3, 3, 4, 3) neighbor(n, 3, 4, 4, 4) neighbor(n, 4, 4, 1, 4) neighbor(n, 4, 3, 1, 3) neighbor(n, 4, 2, 1, 2) neighbor(n, 4, 1, 1, 1) neighbor(s, 1, 4, 4, 4) neighbor(s, 1, 3, 4, 3) neighbor(s, 1, 2, 4, 2) neighbor(s, 1, 1, 4, 1) neighbor(e, 4, 4, 4, 1) neighbor(e, 3, 4, 3, 1) neighbor(e, 2, 4, 2, 1) neighbor(e, 1, 4, 1, 1) neighbor(w, 4, 1, 4, 4) neighbor(w, 3, 1, 3, 4) neighbor(w, 2, 1, 2, 4) neighbor(w, 1, 1, 1, 4) neg_goal(0) 
The GSRS size of NLP = 222
The GSRS cost time = 0.120
